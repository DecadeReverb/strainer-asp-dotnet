image: mcr.microsoft.com/dotnet/sdk:6.0

variables:
 INTEGRATION_TESTS_PROJECT_NAME: 'Strainer.IntegrationTests'
 UNIT_TESTS_PROJECT_NAME: 'Strainer.UnitTests'
 SOURCE_CODE_DIRECTORY: 'src'
 TEST_DIRECTORY: 'test'
 BINARIES_DIRECTORY: 'bin'
 OBJECTS_DIRECTORY: 'obj'
 BUILD_CONFIGURATION: 'Release'
 NUGET_PACKAGES_DIRECTORY: '.nuget'
 NUGET_SERVER_URL: 'https://api.nuget.org/v3/index.json'
 COVERAGE_COLLECTOR_NAME: 'XPlat Code Coverage'
 COVERAGE_REPORT_DIRECTORY_NAME: 'CoverageReport'
 COVERAGE_REPORT_TYPES: 'Html_Dark;Badges'

stages:
  - build
  - test
  - pack
  - deploy


cache:
 key: '${CI_JOB_STAGE}-${CI_COMMIT_REF_SLUG}'
 paths:
  - '${SOURCE_CODE_DIRECTORY}/*/${OBJECTS_DIRECTORY}/project.assets.json'
  - '${SOURCE_CODE_DIRECTORY}/*/${OBJECTS_DIRECTORY}/*.csproj.nuget.*'
  - '${TEST_DIRECTORY}/*/${OBJECTS_DIRECTORY}/project.assets.json'
  - '${TEST_DIRECTORY}/*/${OBJECTS_DIRECTORY}/*.csproj.nuget.*'
  - '${NUGET_PACKAGES_DIRECTORY}'

before_script:
  - 'dotnet restore --packages ${NUGET_PACKAGES_DIRECTORY}'

build:
 stage: build
 script:
  - 'dotnet build --no-restore --configuration ${BUILD_CONFIGURATION}'
 artifacts:
  paths:
   - '${SOURCE_CODE_DIRECTORY}/*/${BINARIES_DIRECTORY}'
   - '${SOURCE_CODE_DIRECTORY}/*/${OBJECTS_DIRECTORY}'
   - '${TEST_DIRECTORY}/*/${BINARIES_DIRECTORY}'
   - '${TEST_DIRECTORY}/*/${OBJECTS_DIRECTORY}'

unit tests:
 stage: test
 script:
  - 'dotnet test ${TEST_DIRECTORY}/${UNIT_TESTS_PROJECT_NAME} --no-restore --no-build --configuration ${BUILD_CONFIGURATION} --collect:"${COVERAGE_COLLECTOR_NAME}"'
  - 'TEST_RESULTS_FILE_PATH=$(find ${TEST_DIRECTORY}/${UNIT_TESTS_PROJECT_NAME}/TestResults -type f -name "coverage.cobertura.xml" -printf "%h/%f\n")'
  - 'dotnet tool install dotnet-reportgenerator-globaltool -g'
  - 'export PATH="$PATH:/root/.dotnet/tools"'
  - 'reportgenerator -reports:"${TEST_RESULTS_FILE_PATH}" -targetdir:"${COVERAGE_REPORT_DIRECTORY_NAME}" -reporttypes:"${COVERAGE_REPORT_TYPES}"'
 artifacts:
  paths:
   - '${COVERAGE_REPORT_DIRECTORY_NAME}'
 dependencies:
  - build

integration tests:
 stage: test
 script:
  - 'dotnet test ${TEST_DIRECTORY}/${INTEGRATION_TESTS_PROJECT_NAME} --no-restore --no-build --configuration ${BUILD_CONFIGURATION}'
 dependencies:
  - build

pack Strainer:
 stage: pack
 only:
  - master
  - tags
 script:
  - 'dotnet pack ${SOURCE_CODE_DIRECTORY}/Strainer --no-restore --no-build --configuration ${BUILD_CONFIGURATION}'
 artifacts:
  paths:
   - '${SOURCE_CODE_DIRECTORY}/*/${BINARIES_DIRECTORY}'
   - '${SOURCE_CODE_DIRECTORY}/*/${OBJECTS_DIRECTORY}'
 dependencies:
  - build

pack Strainer.AspNetCore:
 stage: pack
 only:
  - master
  - tags
 script:
  - 'dotnet pack ${SOURCE_CODE_DIRECTORY}/Strainer.AspNetCore --no-restore --no-build --configuration ${BUILD_CONFIGURATION}'
 artifacts:
  paths:
   - '${SOURCE_CODE_DIRECTORY}/*/${BINARIES_DIRECTORY}'
   - '${SOURCE_CODE_DIRECTORY}/*/${OBJECTS_DIRECTORY}'
 dependencies:
  - build

deploy Strainer:
 stage: deploy
 only:
  - master
  - tags
 script:
  - 'NUGET_PACKAGE_PATH=$(find $SOURCE_CODE_DIRECTORY/Strainer/${BINARIES_DIRECTORY}/${BUILD_CONFIGURATION} -maxdepth 1 -type f -name "*.nupkg" -printf "%h/%f\n")'
  - 'dotnet nuget push ${NUGET_PACKAGE_PATH} --api-key ${NUGET_API_KEY} --source ${NUGET_SERVER_URL}'
 dependencies:
  - pack Strainer

deploy Strainer.AspNetCore:
 stage: deploy
 only:
  - master
  - tags
 script:
  - 'NUGET_PACKAGE_PATH=$(find $SOURCE_CODE_DIRECTORY/Strainer.AspNetCore/${BINARIES_DIRECTORY}/${BUILD_CONFIGURATION} -maxdepth 1 -type f -name "*.nupkg" -printf "%h/%f\n")'
  - 'dotnet nuget push ${NUGET_PACKAGE_PATH} --api-key ${NUGET_API_KEY} --source ${NUGET_SERVER_URL}'
 dependencies:
  - pack Strainer.AspNetCore

pages:
  stage: deploy
  script:
  - mkdir .public
  - cp -r ${COVERAGE_REPORT_DIRECTORY_NAME} .public
  - mv .public public
  artifacts:
    paths:
    - public
